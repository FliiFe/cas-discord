diff --git a/src/derive.cc b/src/derive.cc
index ef7105c..76fc53a 100644
--- a/src/derive.cc
+++ b/src/derive.cc
@@ -738,11 +738,13 @@ namespace giac {
   }
   static string texprintasderive(const gen & feuille,const char * sommetstr,GIAC_CONTEXT){
     if (feuille.type!=_VECT)
-      return gen2tex(feuille,contextptr)+"'";
+      return "\\left("+gen2tex(feuille,contextptr)+"\\right)'";
     return "\\frac{\\partial \\left("+gen2tex(feuille._VECTptr->front(),contextptr)+"\\right)}{\\partial "+gen2tex(feuille._VECTptr->back(),contextptr)+"}";
   }
   static define_unary_function_eval4_quoted (__derive,&step_derive,_derive_s,printasderive,texprintasderive);
+  static define_unary_function_eval4_quoted (__deriver,&step_derive,"deriver",printasderive,texprintasderive);
   define_unary_function_ptr5( at_derive ,alias_at_derive,&__derive,_QUOTE_ARGUMENTS,true);
+  define_unary_function_ptr5( at_deriver ,alias_at_deriver,&__deriver,_QUOTE_ARGUMENTS,true);
 
   gen _grad(const gen & args,GIAC_CONTEXT){
     if ( args.type==_STRNG && args.subtype==-1) return  args;
diff --git a/src/intg.cc b/src/intg.cc
index f03cd3c..9292eda 100755
--- a/src/intg.cc
+++ b/src/intg.cc
@@ -3635,6 +3635,10 @@ namespace giac {
   }
   static define_unary_function_eval4_quoted (__integrate,&_integrate,_integrate_s,0,&texprintasintegrate);
   define_unary_function_ptr5( at_integrate ,alias_at_integrate,&__integrate,_QUOTE_ARGUMENTS,true);
+  static define_unary_function_eval4_quoted (__integrer,&_integrate,"integrer",0,&texprintasintegrate);
+  define_unary_function_ptr5( at_integrer ,alias_at_integrer,&__integrer,_QUOTE_ARGUMENTS,true);
+  static define_unary_function_eval4_quoted (__int,&_integrate,"int",0,&texprintasintegrate);
+  define_unary_function_ptr5( at_int ,alias_at_int,&__int,_QUOTE_ARGUMENTS,true);
 
   // called by approx_area
   double rombergo(const gen & f0,const gen & x, const gen & a_orig, const gen & b_orig, int n,GIAC_CONTEXT){
@@ -5173,9 +5177,29 @@ namespace giac {
     return sum(f,x,a,b,contextptr);
   }
 
+  static string texprintassum(const gen & g,const char * s_orig,GIAC_CONTEXT){
+    string s("\\sum ");
+    if (g.type!=_VECT)
+      return s+gen2tex(g,contextptr);
+    vecteur v(*g._VECTptr);
+    int l(int(v.size()));
+    if (!l)
+      return s;
+    if (l==1)
+      return s+gen2tex(v.front(),contextptr);
+    if (l==2)
+      return s+"_{"+gen2tex(v.back(),contextptr)+"} "+gen2tex(v.front(),contextptr);
+    if (l==4)
+      return s+"_{"+gen2tex(v[1],contextptr)+" = "+gen2tex(v[2],contextptr)+"}^{"+gen2tex(v[3],contextptr)+"}"+gen2tex(v.front(),contextptr);
+    return s;
+  }
+
+
   static const char _somme_s []="somme";
-  static define_unary_function_eval_quoted (__somme,&_sum,_somme_s);
+  static define_unary_function_eval4_quoted (__somme,&_sum,_somme_s,0,&texprintassum);
   define_unary_function_ptr5( at_somme ,alias_at_somme,&__somme,_QUOTE_ARGUMENTS,true);
+  static define_unary_function_eval4_quoted (__sum,&_sum,"sum",0,&texprintassum);
+  define_unary_function_ptr5( at_sum ,alias_at_sum,&__sum,_QUOTE_ARGUMENTS,true);
 
   // innert form
   gen _Sum(const gen & args,GIAC_CONTEXT) {
diff --git a/src/subst.cc b/src/subst.cc
index 42398d1..1ff5360 100755
--- a/src/subst.cc
+++ b/src/subst.cc
@@ -3009,13 +3009,13 @@ namespace giac {
   static define_unary_function_eval (__substituer,&_subst,_substituer_s);
   define_unary_function_ptr5( at_substituer ,alias_at_substituer,&__substituer,0,true);
 
-  static const char _deriver_s []="deriver";
-  static define_unary_function_eval (__deriver,&_derive,_deriver_s);
-  define_unary_function_ptr5( at_deriver ,alias_at_deriver,&__deriver,0,true);
+  /* static const char _deriver_s []="deriver"; */
+  /* static define_unary_function_eval (__deriver,&_derive,_deriver_s); */
+  /* define_unary_function_ptr5( at_deriver ,alias_at_deriver,&__deriver,0,true); */
 
-  static const char _integrer_s []="integrer";
-  static define_unary_function_eval (__integrer,&_integrate,_integrer_s);
-  define_unary_function_ptr5( at_integrer ,alias_at_integrer,&__integrer,0,true);
+  /* static const char _integrer_s []="integrer"; */
+  /* static define_unary_function_eval (__integrer,&_integrate,_integrer_s); */
+  /* define_unary_function_ptr5( at_integrer ,alias_at_integrer,&__integrer,0,true); */
 
   static const char _limite_s []="limite";
   static define_unary_function_eval (__limite,&_limit,_limite_s);
diff --git a/src/ti89.cc b/src/ti89.cc
index 7c6711f..9b27510 100644
--- a/src/ti89.cc
+++ b/src/ti89.cc
@@ -1741,9 +1741,9 @@ namespace giac {
     else
       return _integrate(g,contextptr);
   }
-  static const char _int_s[]="int";
-  static define_unary_function_eval (__int,(const gen_op_context)_int,_int_s);
-  define_unary_function_ptr5( at_int ,alias_at_int,&__int,_QUOTE_ARGUMENTS,true);
+  /* static const char _int_s[]="int"; */
+  /* static define_unary_function_eval (__int,(const gen_op_context)_int,_int_s); */
+  /* define_unary_function_ptr5( at_int ,alias_at_int,&__int,_QUOTE_ARGUMENTS,true); */
 
   static const char _isPrime_s[]="isPrime";
   static define_unary_function_eval (__isPrime,&_isprime,_isPrime_s);
diff --git a/src/usual.cc b/src/usual.cc
index ae0f4ef..1c3563e 100755
--- a/src/usual.cc
+++ b/src/usual.cc
@@ -7009,6 +7009,11 @@ namespace giac {
       return feuille.print(contextptr)+"!";
     return "("+feuille.print(contextptr)+")!";
   }
+  static string texprintasfactorial(const gen & feuille,const char * sommetstr,GIAC_CONTEXT){
+    if (feuille.type==_IDNT || ((feuille.type<=_DOUBLE_ || feuille.type==_FLOAT_ || feuille.type==_REAL) && is_positive(feuille,contextptr)))
+      return feuille.print(contextptr)+"!";
+    return "\\left("+feuille.print(contextptr)+"\\right)!";
+  }
   static gen d_factorial(const gen & args,GIAC_CONTEXT){
     return Psi(args+1,0)*_factorial(args,contextptr);
   }
@@ -7027,7 +7032,7 @@ namespace giac {
     return factorial((unsigned long int) args.val);
   }
   static const char _factorial_s []="factorial";
-  static define_unary_function_eval5 (__factorial,&_factorial,D_at_factorial,_factorial_s,&printasfactorial,0);
+  static define_unary_function_eval5_quoted (__factorial,&_factorial,D_at_factorial,_factorial_s,&printasfactorial,&texprintasfactorial);
   define_unary_function_ptr5( at_factorial ,alias_at_factorial,&__factorial,0,true);
 
   gen double_is_int(const gen & g,GIAC_CONTEXT){
@@ -10189,9 +10194,9 @@ namespace giac {
 #endif
   define_unary_function_ptr5( at_Heaviside ,alias_at_Heaviside,&__Heaviside,0,true);
 
-  const char _sum_s []="sum";
+  const char _sum_s []="sum2";
   static define_unary_function_eval_quoted (__sum,&_sum,_sum_s);
-  define_unary_function_ptr5( at_sum ,alias_at_sum,&__sum,_QUOTE_ARGUMENTS,true);
+  /* define_unary_function_ptr5( at_sum ,alias_at_sum,&__sum,_QUOTE_ARGUMENTS,true); */
 
   gen fast_icontent(const gen & g){
     if (g.type==_VECT){
